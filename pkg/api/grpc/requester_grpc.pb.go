// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: requester.proto

package requester

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RequesterService_LaunchService_FullMethodName = "/requester.RequesterService/LaunchService"
)

// RequesterServiceClient is the client API for RequesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequesterServiceClient interface {
	LaunchService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type requesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequesterServiceClient(cc grpc.ClientConnInterface) RequesterServiceClient {
	return &requesterServiceClient{cc}
}

func (c *requesterServiceClient) LaunchService(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RequesterService_LaunchService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequesterServiceServer is the server API for RequesterService service.
// All implementations must embed UnimplementedRequesterServiceServer
// for forward compatibility
type RequesterServiceServer interface {
	LaunchService(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedRequesterServiceServer()
}

// UnimplementedRequesterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRequesterServiceServer struct {
}

func (UnimplementedRequesterServiceServer) LaunchService(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchService not implemented")
}
func (UnimplementedRequesterServiceServer) mustEmbedUnimplementedRequesterServiceServer() {}

// UnsafeRequesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequesterServiceServer will
// result in compilation errors.
type UnsafeRequesterServiceServer interface {
	mustEmbedUnimplementedRequesterServiceServer()
}

func RegisterRequesterServiceServer(s grpc.ServiceRegistrar, srv RequesterServiceServer) {
	s.RegisterService(&RequesterService_ServiceDesc, srv)
}

func _RequesterService_LaunchService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequesterServiceServer).LaunchService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequesterService_LaunchService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequesterServiceServer).LaunchService(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RequesterService_ServiceDesc is the grpc.ServiceDesc for RequesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "requester.RequesterService",
	HandlerType: (*RequesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LaunchService",
			Handler:    _RequesterService_LaunchService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "requester.proto",
}
